/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SessionsCreateRouteImport } from './routes/sessions/create'
import { Route as LayoutSsoCallbackRouteImport } from './routes/_layout/sso-callback'
import { Route as LayoutSettingsRouteImport } from './routes/_layout/settings'
import { Route as LayoutSettingsIndexRouteImport } from './routes/_layout/settings/index'
import { Route as LayoutSettingsProvidersRouteImport } from './routes/_layout/settings/providers'
import { Route as LayoutSettingsAdvancedRouteImport } from './routes/_layout/settings/advanced'
import { Route as LayoutSessionsSessionIdRouteImport } from './routes/_layout/sessions/$sessionId'
import { Route as LayoutFlowsFlowIdRouteImport } from './routes/_layout/flows/$flowId'
import { Route as LayoutCardsCardIdRouteImport } from './routes/_layout/cards/$cardId'
import { Route as LayoutSettingsLegalIndexRouteImport } from './routes/_layout/settings/legal/index'
import { Route as LayoutSettingsAccountIndexRouteImport } from './routes/_layout/settings/account/index'
import { Route as LayoutSettingsLegalTermsOfServiceRouteImport } from './routes/_layout/settings/legal/terms-of-service'
import { Route as LayoutSettingsLegalRefundPolicyRouteImport } from './routes/_layout/settings/legal/refund-policy'
import { Route as LayoutSettingsLegalPrivacyPolicyRouteImport } from './routes/_layout/settings/legal/privacy-policy'
import { Route as LayoutSettingsLegalOssNoticeRouteImport } from './routes/_layout/settings/legal/oss-notice'
import { Route as LayoutSettingsLegalContentPolicyRouteImport } from './routes/_layout/settings/legal/content-policy'
import { Route as LayoutSettingsAccountCreditUsageRouteImport } from './routes/_layout/settings/account/credit-usage'

const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SessionsCreateRoute = SessionsCreateRouteImport.update({
  id: '/sessions/create',
  path: '/sessions/create',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutSsoCallbackRoute = LayoutSsoCallbackRouteImport.update({
  id: '/sso-callback',
  path: '/sso-callback',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutSettingsRoute = LayoutSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutSettingsIndexRoute = LayoutSettingsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutSettingsRoute,
} as any)
const LayoutSettingsProvidersRoute = LayoutSettingsProvidersRouteImport.update({
  id: '/providers',
  path: '/providers',
  getParentRoute: () => LayoutSettingsRoute,
} as any)
const LayoutSettingsAdvancedRoute = LayoutSettingsAdvancedRouteImport.update({
  id: '/advanced',
  path: '/advanced',
  getParentRoute: () => LayoutSettingsRoute,
} as any)
const LayoutSessionsSessionIdRoute = LayoutSessionsSessionIdRouteImport.update({
  id: '/sessions/$sessionId',
  path: '/sessions/$sessionId',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutFlowsFlowIdRoute = LayoutFlowsFlowIdRouteImport.update({
  id: '/flows/$flowId',
  path: '/flows/$flowId',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutCardsCardIdRoute = LayoutCardsCardIdRouteImport.update({
  id: '/cards/$cardId',
  path: '/cards/$cardId',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutSettingsLegalIndexRoute =
  LayoutSettingsLegalIndexRouteImport.update({
    id: '/legal/',
    path: '/legal/',
    getParentRoute: () => LayoutSettingsRoute,
  } as any)
const LayoutSettingsAccountIndexRoute =
  LayoutSettingsAccountIndexRouteImport.update({
    id: '/account/',
    path: '/account/',
    getParentRoute: () => LayoutSettingsRoute,
  } as any)
const LayoutSettingsLegalTermsOfServiceRoute =
  LayoutSettingsLegalTermsOfServiceRouteImport.update({
    id: '/legal/terms-of-service',
    path: '/legal/terms-of-service',
    getParentRoute: () => LayoutSettingsRoute,
  } as any)
const LayoutSettingsLegalRefundPolicyRoute =
  LayoutSettingsLegalRefundPolicyRouteImport.update({
    id: '/legal/refund-policy',
    path: '/legal/refund-policy',
    getParentRoute: () => LayoutSettingsRoute,
  } as any)
const LayoutSettingsLegalPrivacyPolicyRoute =
  LayoutSettingsLegalPrivacyPolicyRouteImport.update({
    id: '/legal/privacy-policy',
    path: '/legal/privacy-policy',
    getParentRoute: () => LayoutSettingsRoute,
  } as any)
const LayoutSettingsLegalOssNoticeRoute =
  LayoutSettingsLegalOssNoticeRouteImport.update({
    id: '/legal/oss-notice',
    path: '/legal/oss-notice',
    getParentRoute: () => LayoutSettingsRoute,
  } as any)
const LayoutSettingsLegalContentPolicyRoute =
  LayoutSettingsLegalContentPolicyRouteImport.update({
    id: '/legal/content-policy',
    path: '/legal/content-policy',
    getParentRoute: () => LayoutSettingsRoute,
  } as any)
const LayoutSettingsAccountCreditUsageRoute =
  LayoutSettingsAccountCreditUsageRouteImport.update({
    id: '/account/credit-usage',
    path: '/account/credit-usage',
    getParentRoute: () => LayoutSettingsRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/settings': typeof LayoutSettingsRouteWithChildren
  '/sso-callback': typeof LayoutSsoCallbackRoute
  '/sessions/create': typeof SessionsCreateRoute
  '/cards/$cardId': typeof LayoutCardsCardIdRoute
  '/flows/$flowId': typeof LayoutFlowsFlowIdRoute
  '/sessions/$sessionId': typeof LayoutSessionsSessionIdRoute
  '/settings/advanced': typeof LayoutSettingsAdvancedRoute
  '/settings/providers': typeof LayoutSettingsProvidersRoute
  '/settings/': typeof LayoutSettingsIndexRoute
  '/settings/account/credit-usage': typeof LayoutSettingsAccountCreditUsageRoute
  '/settings/legal/content-policy': typeof LayoutSettingsLegalContentPolicyRoute
  '/settings/legal/oss-notice': typeof LayoutSettingsLegalOssNoticeRoute
  '/settings/legal/privacy-policy': typeof LayoutSettingsLegalPrivacyPolicyRoute
  '/settings/legal/refund-policy': typeof LayoutSettingsLegalRefundPolicyRoute
  '/settings/legal/terms-of-service': typeof LayoutSettingsLegalTermsOfServiceRoute
  '/settings/account': typeof LayoutSettingsAccountIndexRoute
  '/settings/legal': typeof LayoutSettingsLegalIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/sso-callback': typeof LayoutSsoCallbackRoute
  '/sessions/create': typeof SessionsCreateRoute
  '/cards/$cardId': typeof LayoutCardsCardIdRoute
  '/flows/$flowId': typeof LayoutFlowsFlowIdRoute
  '/sessions/$sessionId': typeof LayoutSessionsSessionIdRoute
  '/settings/advanced': typeof LayoutSettingsAdvancedRoute
  '/settings/providers': typeof LayoutSettingsProvidersRoute
  '/settings': typeof LayoutSettingsIndexRoute
  '/settings/account/credit-usage': typeof LayoutSettingsAccountCreditUsageRoute
  '/settings/legal/content-policy': typeof LayoutSettingsLegalContentPolicyRoute
  '/settings/legal/oss-notice': typeof LayoutSettingsLegalOssNoticeRoute
  '/settings/legal/privacy-policy': typeof LayoutSettingsLegalPrivacyPolicyRoute
  '/settings/legal/refund-policy': typeof LayoutSettingsLegalRefundPolicyRoute
  '/settings/legal/terms-of-service': typeof LayoutSettingsLegalTermsOfServiceRoute
  '/settings/account': typeof LayoutSettingsAccountIndexRoute
  '/settings/legal': typeof LayoutSettingsLegalIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/settings': typeof LayoutSettingsRouteWithChildren
  '/_layout/sso-callback': typeof LayoutSsoCallbackRoute
  '/sessions/create': typeof SessionsCreateRoute
  '/_layout/cards/$cardId': typeof LayoutCardsCardIdRoute
  '/_layout/flows/$flowId': typeof LayoutFlowsFlowIdRoute
  '/_layout/sessions/$sessionId': typeof LayoutSessionsSessionIdRoute
  '/_layout/settings/advanced': typeof LayoutSettingsAdvancedRoute
  '/_layout/settings/providers': typeof LayoutSettingsProvidersRoute
  '/_layout/settings/': typeof LayoutSettingsIndexRoute
  '/_layout/settings/account/credit-usage': typeof LayoutSettingsAccountCreditUsageRoute
  '/_layout/settings/legal/content-policy': typeof LayoutSettingsLegalContentPolicyRoute
  '/_layout/settings/legal/oss-notice': typeof LayoutSettingsLegalOssNoticeRoute
  '/_layout/settings/legal/privacy-policy': typeof LayoutSettingsLegalPrivacyPolicyRoute
  '/_layout/settings/legal/refund-policy': typeof LayoutSettingsLegalRefundPolicyRoute
  '/_layout/settings/legal/terms-of-service': typeof LayoutSettingsLegalTermsOfServiceRoute
  '/_layout/settings/account/': typeof LayoutSettingsAccountIndexRoute
  '/_layout/settings/legal/': typeof LayoutSettingsLegalIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/settings'
    | '/sso-callback'
    | '/sessions/create'
    | '/cards/$cardId'
    | '/flows/$flowId'
    | '/sessions/$sessionId'
    | '/settings/advanced'
    | '/settings/providers'
    | '/settings/'
    | '/settings/account/credit-usage'
    | '/settings/legal/content-policy'
    | '/settings/legal/oss-notice'
    | '/settings/legal/privacy-policy'
    | '/settings/legal/refund-policy'
    | '/settings/legal/terms-of-service'
    | '/settings/account'
    | '/settings/legal'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/sso-callback'
    | '/sessions/create'
    | '/cards/$cardId'
    | '/flows/$flowId'
    | '/sessions/$sessionId'
    | '/settings/advanced'
    | '/settings/providers'
    | '/settings'
    | '/settings/account/credit-usage'
    | '/settings/legal/content-policy'
    | '/settings/legal/oss-notice'
    | '/settings/legal/privacy-policy'
    | '/settings/legal/refund-policy'
    | '/settings/legal/terms-of-service'
    | '/settings/account'
    | '/settings/legal'
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/_layout/settings'
    | '/_layout/sso-callback'
    | '/sessions/create'
    | '/_layout/cards/$cardId'
    | '/_layout/flows/$flowId'
    | '/_layout/sessions/$sessionId'
    | '/_layout/settings/advanced'
    | '/_layout/settings/providers'
    | '/_layout/settings/'
    | '/_layout/settings/account/credit-usage'
    | '/_layout/settings/legal/content-policy'
    | '/_layout/settings/legal/oss-notice'
    | '/_layout/settings/legal/privacy-policy'
    | '/_layout/settings/legal/refund-policy'
    | '/_layout/settings/legal/terms-of-service'
    | '/_layout/settings/account/'
    | '/_layout/settings/legal/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LayoutRoute: typeof LayoutRouteWithChildren
  SessionsCreateRoute: typeof SessionsCreateRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sessions/create': {
      id: '/sessions/create'
      path: '/sessions/create'
      fullPath: '/sessions/create'
      preLoaderRoute: typeof SessionsCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/sso-callback': {
      id: '/_layout/sso-callback'
      path: '/sso-callback'
      fullPath: '/sso-callback'
      preLoaderRoute: typeof LayoutSsoCallbackRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/settings': {
      id: '/_layout/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof LayoutSettingsRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/settings/': {
      id: '/_layout/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof LayoutSettingsIndexRouteImport
      parentRoute: typeof LayoutSettingsRoute
    }
    '/_layout/settings/providers': {
      id: '/_layout/settings/providers'
      path: '/providers'
      fullPath: '/settings/providers'
      preLoaderRoute: typeof LayoutSettingsProvidersRouteImport
      parentRoute: typeof LayoutSettingsRoute
    }
    '/_layout/settings/advanced': {
      id: '/_layout/settings/advanced'
      path: '/advanced'
      fullPath: '/settings/advanced'
      preLoaderRoute: typeof LayoutSettingsAdvancedRouteImport
      parentRoute: typeof LayoutSettingsRoute
    }
    '/_layout/sessions/$sessionId': {
      id: '/_layout/sessions/$sessionId'
      path: '/sessions/$sessionId'
      fullPath: '/sessions/$sessionId'
      preLoaderRoute: typeof LayoutSessionsSessionIdRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/flows/$flowId': {
      id: '/_layout/flows/$flowId'
      path: '/flows/$flowId'
      fullPath: '/flows/$flowId'
      preLoaderRoute: typeof LayoutFlowsFlowIdRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/cards/$cardId': {
      id: '/_layout/cards/$cardId'
      path: '/cards/$cardId'
      fullPath: '/cards/$cardId'
      preLoaderRoute: typeof LayoutCardsCardIdRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/settings/legal/': {
      id: '/_layout/settings/legal/'
      path: '/legal'
      fullPath: '/settings/legal'
      preLoaderRoute: typeof LayoutSettingsLegalIndexRouteImport
      parentRoute: typeof LayoutSettingsRoute
    }
    '/_layout/settings/account/': {
      id: '/_layout/settings/account/'
      path: '/account'
      fullPath: '/settings/account'
      preLoaderRoute: typeof LayoutSettingsAccountIndexRouteImport
      parentRoute: typeof LayoutSettingsRoute
    }
    '/_layout/settings/legal/terms-of-service': {
      id: '/_layout/settings/legal/terms-of-service'
      path: '/legal/terms-of-service'
      fullPath: '/settings/legal/terms-of-service'
      preLoaderRoute: typeof LayoutSettingsLegalTermsOfServiceRouteImport
      parentRoute: typeof LayoutSettingsRoute
    }
    '/_layout/settings/legal/refund-policy': {
      id: '/_layout/settings/legal/refund-policy'
      path: '/legal/refund-policy'
      fullPath: '/settings/legal/refund-policy'
      preLoaderRoute: typeof LayoutSettingsLegalRefundPolicyRouteImport
      parentRoute: typeof LayoutSettingsRoute
    }
    '/_layout/settings/legal/privacy-policy': {
      id: '/_layout/settings/legal/privacy-policy'
      path: '/legal/privacy-policy'
      fullPath: '/settings/legal/privacy-policy'
      preLoaderRoute: typeof LayoutSettingsLegalPrivacyPolicyRouteImport
      parentRoute: typeof LayoutSettingsRoute
    }
    '/_layout/settings/legal/oss-notice': {
      id: '/_layout/settings/legal/oss-notice'
      path: '/legal/oss-notice'
      fullPath: '/settings/legal/oss-notice'
      preLoaderRoute: typeof LayoutSettingsLegalOssNoticeRouteImport
      parentRoute: typeof LayoutSettingsRoute
    }
    '/_layout/settings/legal/content-policy': {
      id: '/_layout/settings/legal/content-policy'
      path: '/legal/content-policy'
      fullPath: '/settings/legal/content-policy'
      preLoaderRoute: typeof LayoutSettingsLegalContentPolicyRouteImport
      parentRoute: typeof LayoutSettingsRoute
    }
    '/_layout/settings/account/credit-usage': {
      id: '/_layout/settings/account/credit-usage'
      path: '/account/credit-usage'
      fullPath: '/settings/account/credit-usage'
      preLoaderRoute: typeof LayoutSettingsAccountCreditUsageRouteImport
      parentRoute: typeof LayoutSettingsRoute
    }
  }
}

interface LayoutSettingsRouteChildren {
  LayoutSettingsAdvancedRoute: typeof LayoutSettingsAdvancedRoute
  LayoutSettingsProvidersRoute: typeof LayoutSettingsProvidersRoute
  LayoutSettingsIndexRoute: typeof LayoutSettingsIndexRoute
  LayoutSettingsAccountCreditUsageRoute: typeof LayoutSettingsAccountCreditUsageRoute
  LayoutSettingsLegalContentPolicyRoute: typeof LayoutSettingsLegalContentPolicyRoute
  LayoutSettingsLegalOssNoticeRoute: typeof LayoutSettingsLegalOssNoticeRoute
  LayoutSettingsLegalPrivacyPolicyRoute: typeof LayoutSettingsLegalPrivacyPolicyRoute
  LayoutSettingsLegalRefundPolicyRoute: typeof LayoutSettingsLegalRefundPolicyRoute
  LayoutSettingsLegalTermsOfServiceRoute: typeof LayoutSettingsLegalTermsOfServiceRoute
  LayoutSettingsAccountIndexRoute: typeof LayoutSettingsAccountIndexRoute
  LayoutSettingsLegalIndexRoute: typeof LayoutSettingsLegalIndexRoute
}

const LayoutSettingsRouteChildren: LayoutSettingsRouteChildren = {
  LayoutSettingsAdvancedRoute: LayoutSettingsAdvancedRoute,
  LayoutSettingsProvidersRoute: LayoutSettingsProvidersRoute,
  LayoutSettingsIndexRoute: LayoutSettingsIndexRoute,
  LayoutSettingsAccountCreditUsageRoute: LayoutSettingsAccountCreditUsageRoute,
  LayoutSettingsLegalContentPolicyRoute: LayoutSettingsLegalContentPolicyRoute,
  LayoutSettingsLegalOssNoticeRoute: LayoutSettingsLegalOssNoticeRoute,
  LayoutSettingsLegalPrivacyPolicyRoute: LayoutSettingsLegalPrivacyPolicyRoute,
  LayoutSettingsLegalRefundPolicyRoute: LayoutSettingsLegalRefundPolicyRoute,
  LayoutSettingsLegalTermsOfServiceRoute:
    LayoutSettingsLegalTermsOfServiceRoute,
  LayoutSettingsAccountIndexRoute: LayoutSettingsAccountIndexRoute,
  LayoutSettingsLegalIndexRoute: LayoutSettingsLegalIndexRoute,
}

const LayoutSettingsRouteWithChildren = LayoutSettingsRoute._addFileChildren(
  LayoutSettingsRouteChildren,
)

interface LayoutRouteChildren {
  LayoutSettingsRoute: typeof LayoutSettingsRouteWithChildren
  LayoutSsoCallbackRoute: typeof LayoutSsoCallbackRoute
  LayoutCardsCardIdRoute: typeof LayoutCardsCardIdRoute
  LayoutFlowsFlowIdRoute: typeof LayoutFlowsFlowIdRoute
  LayoutSessionsSessionIdRoute: typeof LayoutSessionsSessionIdRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutSettingsRoute: LayoutSettingsRouteWithChildren,
  LayoutSsoCallbackRoute: LayoutSsoCallbackRoute,
  LayoutCardsCardIdRoute: LayoutCardsCardIdRoute,
  LayoutFlowsFlowIdRoute: LayoutFlowsFlowIdRoute,
  LayoutSessionsSessionIdRoute: LayoutSessionsSessionIdRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LayoutRoute: LayoutRouteWithChildren,
  SessionsCreateRoute: SessionsCreateRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
